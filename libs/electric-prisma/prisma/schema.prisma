generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ✅ Enum for Role
enum Role {
  USER
  ADMIN
}


model Category {
  id          String       @id @default(uuid())
  name        String
  image       String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  SubCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id          String        @id @default(uuid())
  name        String
  // description String?
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Product     Product[]
}

model Product {
  id            String        @id @default(uuid())
  name          String
  description   String?
  specification String?
  price         Float
  image         String
  categoryId    String
  subCategoryId String
  category      Category     @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory  @relation(fields: [subCategoryId], references: [id])

  Order Order[]
}

model Service {
  id            String   @id @default(uuid())
  name          String
  description   String?
  image         String
  basePrice     Float
  priceRange    String
  timeDuration  String
  city          String
  latitude      Float
  longitude     Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Order         Order[]

  Booking Booking[]
}


// ✅ User Model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  verified  Boolean  @default(false)  // ✅ To check OTP verification
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]

  Booking Booking[]
}

// model User {
//   id                String         @id @default(cuid())
//   email             String         @unique
//   fullname          String
//   username          String         @unique
//   password          String
//   role              Role           @default(USER)
//   isEmailVerified   Boolean        @default(false)
//   otp               String?  // For OTP Verification
//    otpExpiry        DateTime?
//   createdAt         DateTime       @default(now())
//   updatedAt         DateTime       @updatedAt

 

//   @@map("users")
//   Order Order[]
//   Booking Booking[]
// }
// model Order {
//   id          String       @id @default(cuid())
//   userId      String
//   user        User         @relation(fields: [userId], references: [id])
//   productId   String
//   product     Product      @relation(fields: [productId], references: [id])
//   quantity    Int
//   totalPrice  Float
//   status      String       @default("pending")
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt

//   @@map("orders")
// }

model Order {
  id            String       @id @default(uuid())
  userId        String
  type          OrderType
  status        OrderStatus  @default(PENDING)
  productId     String?
  serviceId     String?
  address       String
  phone         String
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user          User         @relation(fields: [userId], references: [id])
  product       Product?     @relation(fields: [productId], references: [id])
  service       Service?     @relation(fields: [serviceId], references: [id])

  @@map("orders")
}

enum OrderType {
  PRODUCT
  SERVICE
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}


model Booking {
  id          String         @id @default(uuid())
  userId      String
  serviceId   String
  phone       String
  notes       String?
  city        String
  status      BookingStatus  @default(PENDING)
  createdAt   DateTime       @default(now())

  user        User           @relation(fields: [userId], references: [id])
  service     Service        @relation(fields: [serviceId], references: [id])
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}

// ✅ OTP Model (For Signup, Resend, Forgot Password)
model Otp {
  id        String   @id @default(uuid())
  email     String
  otp       String
  type      OtpType  // ✅ For Signup OTP or Password Reset OTP
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// ✅ Enum for OTP Type (to differentiate between Signup & Password Reset)
enum OtpType {
  SIGNUP
  RESET_PASSWORD
}

